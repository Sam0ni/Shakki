import unittest
from pelilauta import Pelilauta


class TestKuningatar(unittest.TestCase):

    def setUp(self):
        self.ruudun_koko = 125
        self.maxDiff = None

    def test_kuningatar_liikkeet_oikein_1(self):
        lauta = [[5,0,0,0,0,0,0,5],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [5,0,0,0,0,0,0,5]]
        pelilauta = Pelilauta(lauta, self.ruudun_koko)

        tiedetyt_liikkeet = [
            ((5, 0, 7), (5, 1, 6)),
            ((5, 0, 7), (5, 2, 5)),
            ((5, 0, 7), (5, 3, 4)),
            ((5, 0, 7), (5, 4, 3)),
            ((5, 0, 7), (5, 5, 2)),
            ((5, 0, 7), (5, 6, 1)),
            ((5, 7, 0), (5, 6, 1)),
            ((5, 7, 0), (5, 5, 2)),
            ((5, 7, 0), (5, 4, 3)),
            ((5, 7, 0), (5, 3, 4)),
            ((5, 7, 0), (5, 2, 5)),
            ((5, 7, 0), (5, 1, 6)),
            ((5, 0, 0), (5, 1, 1)),
            ((5, 0, 0), (5, 2, 2)),
            ((5, 0, 0), (5, 3, 3)),
            ((5, 0, 0), (5, 4, 4)),
            ((5, 0, 0), (5, 5, 5)),
            ((5, 0, 0), (5, 6, 6)),
            ((5, 7, 7), (5, 6, 6)),
            ((5, 7, 7), (5, 5, 5)),
            ((5, 7, 7), (5, 4, 4)),
            ((5, 7, 7), (5, 3, 3)),
            ((5, 7, 7), (5, 2, 2)),
            ((5, 7, 7), (5, 1, 1)),
            ((5, 0, 7), (5, 1, 7)),
            ((5, 0, 7), (5, 2, 7)),
            ((5, 0, 7), (5, 3, 7)),
            ((5, 0, 7), (5, 4, 7)),
            ((5, 0, 7), (5, 5, 7)),
            ((5, 0, 7), (5, 6, 7)),
            ((5, 0, 7), (5, 0, 6)),
            ((5, 0, 7), (5, 0, 5)),
            ((5, 0, 7), (5, 0, 4)),
            ((5, 0, 7), (5, 0, 3)),
            ((5, 0, 7), (5, 0, 2)),
            ((5, 0, 7), (5, 0, 1)),
            ((5, 7, 0), (5, 7, 1)),
            ((5, 7, 0), (5, 7, 2)),
            ((5, 7, 0), (5, 7, 3)),
            ((5, 7, 0), (5, 7, 4)),
            ((5, 7, 0), (5, 7, 5)),
            ((5, 7, 0), (5, 7, 6)),
            ((5, 7, 0), (5, 6, 0)),
            ((5, 7, 0), (5, 5, 0)),
            ((5, 7, 0), (5, 4, 0)),
            ((5, 7, 0), (5, 3, 0)),
            ((5, 7, 0), (5, 2, 0)),
            ((5, 7, 0), (5, 1, 0)),
            ((5, 0, 0), (5, 0, 1)),
            ((5, 0, 0), (5, 0, 2)),
            ((5, 0, 0), (5, 0, 3)),
            ((5, 0, 0), (5, 0, 4)),
            ((5, 0, 0), (5, 0, 5)),
            ((5, 0, 0), (5, 0, 6)),
            ((5, 0, 0), (5, 1, 0)),
            ((5, 0, 0), (5, 2, 0)),
            ((5, 0, 0), (5, 3, 0)),
            ((5, 0, 0), (5, 4, 0)),
            ((5, 0, 0), (5, 5, 0)),
            ((5, 0, 0), (5, 6, 0)),
            ((5, 7, 7), (5, 7, 6)),
            ((5, 7, 7), (5, 7, 5)),
            ((5, 7, 7), (5, 7, 4)),
            ((5, 7, 7), (5, 7, 3)),
            ((5, 7, 7), (5, 7, 2)),
            ((5, 7, 7), (5, 7, 1)),
            ((5, 7, 7), (5, 6, 7)),
            ((5, 7, 7), (5, 5, 7)),
            ((5, 7, 7), (5, 4, 7)),
            ((5, 7, 7), (5, 3, 7)),
            ((5, 7, 7), (5, 2, 7)),
            ((5, 7, 7), (5, 1, 7)),
        ]
        tiedetyt_blokit = [
            ((5, 7, 7), (0, 0)),
            ((5, 7, 7), (0, 7)),
            ((5, 7, 7), (7, 0)),
            ((5, 7, 0), (7, 7)),
            ((5, 7, 0), (0, 7)),
            ((5, 7, 0), (0, 0)),
            ((5, 0, 7), (0, 0)),
            ((5, 0, 7), (7, 7)),
            ((5, 0, 7), (7, 0)),
            ((5, 0, 0), (7, 7)),
            ((5, 0, 0), (0, 7)),
            ((5, 0, 0), (7, 0)),
        ]

        mahdolliset_liikkeet = []
        mahdolliset_blokit = []

        uudet_liikkeet, uudet_edessa, valkoinen_shakissa, musta_shakissa, valkoisen_shakkaajat, mustan_shakkaajat = pelilauta.alusta()
        mahdolliset_liikkeet = mahdolliset_liikkeet + uudet_liikkeet
        mahdolliset_blokit = mahdolliset_blokit + uudet_edessa
        
        self.assertCountEqual(mahdolliset_liikkeet, tiedetyt_liikkeet)
        self.assertCountEqual(mahdolliset_blokit, tiedetyt_blokit)

    def test_kuningatar_liikkeet_oikein_2(self):
        lauta = [[11,0,0,0,0,0,0,11],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [5,0,0,0,0,0,0,5]]
        pelilauta = Pelilauta(lauta, self.ruudun_koko)

        tiedetyt_liikkeet = [
            ((11, 0, 7), (11, 1, 6)),
            ((11, 0, 7), (11, 2, 5)),
            ((11, 0, 7), (11, 3, 4)),
            ((11, 0, 7), (11, 4, 3)),
            ((11, 0, 7), (11, 5, 2)),
            ((11, 0, 7), (11, 6, 1)),
            ((11, 0, 7), (11, 7, 0)),

            ((5, 7, 0), (5, 6, 1)),
            ((5, 7, 0), (5, 5, 2)),
            ((5, 7, 0), (5, 4, 3)),
            ((5, 7, 0), (5, 3, 4)),
            ((5, 7, 0), (5, 2, 5)),
            ((5, 7, 0), (5, 1, 6)),
            ((5, 7, 0), (5, 0, 7)),

            ((11, 0, 0), (11, 1, 1)),
            ((11, 0, 0), (11, 2, 2)),
            ((11, 0, 0), (11, 3, 3)),
            ((11, 0, 0), (11, 4, 4)),
            ((11, 0, 0), (11, 5, 5)),
            ((11, 0, 0), (11, 6, 6)),
            ((11, 0, 0), (11, 7, 7)),

            ((5, 7, 7), (5, 6, 6)),
            ((5, 7, 7), (5, 5, 5)),
            ((5, 7, 7), (5, 4, 4)),
            ((5, 7, 7), (5, 3, 3)),
            ((5, 7, 7), (5, 2, 2)),
            ((5, 7, 7), (5, 1, 1)),
            ((5, 7, 7), (5, 0, 0)),

            ((11, 0, 7), (11, 1, 7)),
            ((11, 0, 7), (11, 2, 7)),
            ((11, 0, 7), (11, 3, 7)),
            ((11, 0, 7), (11, 4, 7)),
            ((11, 0, 7), (11, 5, 7)),
            ((11, 0, 7), (11, 6, 7)),
            ((11, 0, 7), (11, 7, 7)),
            ((11, 0, 7), (11, 0, 6)),
            ((11, 0, 7), (11, 0, 5)),
            ((11, 0, 7), (11, 0, 4)),
            ((11, 0, 7), (11, 0, 3)),
            ((11, 0, 7), (11, 0, 2)),
            ((11, 0, 7), (11, 0, 1)),

            ((5, 7, 0), (5, 7, 1)),
            ((5, 7, 0), (5, 7, 2)),
            ((5, 7, 0), (5, 7, 3)),
            ((5, 7, 0), (5, 7, 4)),
            ((5, 7, 0), (5, 7, 5)),
            ((5, 7, 0), (5, 7, 6)),
            ((5, 7, 0), (5, 6, 0)),
            ((5, 7, 0), (5, 5, 0)),
            ((5, 7, 0), (5, 4, 0)),
            ((5, 7, 0), (5, 3, 0)),
            ((5, 7, 0), (5, 2, 0)),
            ((5, 7, 0), (5, 1, 0)),
            ((5, 7, 0), (5, 0, 0)),

            ((11, 0, 0), (11, 0, 1)),
            ((11, 0, 0), (11, 0, 2)),
            ((11, 0, 0), (11, 0, 3)),
            ((11, 0, 0), (11, 0, 4)),
            ((11, 0, 0), (11, 0, 5)),
            ((11, 0, 0), (11, 0, 6)),
            ((11, 0, 0), (11, 1, 0)),
            ((11, 0, 0), (11, 2, 0)),
            ((11, 0, 0), (11, 3, 0)),
            ((11, 0, 0), (11, 4, 0)),
            ((11, 0, 0), (11, 5, 0)),
            ((11, 0, 0), (11, 6, 0)),
            ((11, 0, 0), (11, 7, 0)),

            ((5, 7, 7), (5, 7, 6)),
            ((5, 7, 7), (5, 7, 5)),
            ((5, 7, 7), (5, 7, 4)),
            ((5, 7, 7), (5, 7, 3)),
            ((5, 7, 7), (5, 7, 2)),
            ((5, 7, 7), (5, 7, 1)),
            ((5, 7, 7), (5, 6, 7)),
            ((5, 7, 7), (5, 5, 7)),
            ((5, 7, 7), (5, 4, 7)),
            ((5, 7, 7), (5, 3, 7)),
            ((5, 7, 7), (5, 2, 7)),
            ((5, 7, 7), (5, 1, 7)),
            ((5, 7, 7), (5, 0, 7)),
        ]
        tiedetyt_blokit = [
            ((5, 7, 7), (7, 0)),
            ((5, 7, 0), (7, 7)),
            ((11, 0, 7), (0, 0)),
            ((11, 0, 0), (0, 7))
        ]

        mahdolliset_liikkeet = []
        mahdolliset_blokit = []

        uudet_liikkeet, uudet_edessa, valkoinen_shakissa, musta_shakissa, valkoisen_shakkaajat, mustan_shakkaajat= pelilauta.alusta()
        mahdolliset_liikkeet = mahdolliset_liikkeet + uudet_liikkeet
        mahdolliset_blokit = mahdolliset_blokit + uudet_edessa
        
        self.assertCountEqual(mahdolliset_liikkeet, tiedetyt_liikkeet)
        self.assertCountEqual(mahdolliset_blokit, tiedetyt_blokit)

    def test_kuningatar_liikkeet_oikein_3(self):
        lauta = [[5,0,0,0,0,0,0,5],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [11,0,0,0,0,0,0,11]]
        pelilauta = Pelilauta(lauta, self.ruudun_koko)

        tiedetyt_liikkeet = [
            ((5, 0, 7), (5, 1, 6)),
            ((5, 0, 7), (5, 2, 5)),
            ((5, 0, 7), (5, 3, 4)),
            ((5, 0, 7), (5, 4, 3)),
            ((5, 0, 7), (5, 5, 2)),
            ((5, 0, 7), (5, 6, 1)),
            ((5, 0, 7), (5, 7, 0)),

            ((11, 7, 0), (11, 6, 1)),
            ((11, 7, 0), (11, 5, 2)),
            ((11, 7, 0), (11, 4, 3)),
            ((11, 7, 0), (11, 3, 4)),
            ((11, 7, 0), (11, 2, 5)),
            ((11, 7, 0), (11, 1, 6)),
            ((11, 7, 0), (11, 0, 7)),

            ((5, 0, 0), (5, 1, 1)),
            ((5, 0, 0), (5, 2, 2)),
            ((5, 0, 0), (5, 3, 3)),
            ((5, 0, 0), (5, 4, 4)),
            ((5, 0, 0), (5, 5, 5)),
            ((5, 0, 0), (5, 6, 6)),
            ((5, 0, 0), (5, 7, 7)),

            ((11, 7, 7), (11, 6, 6)),
            ((11, 7, 7), (11, 5, 5)),
            ((11, 7, 7), (11, 4, 4)),
            ((11, 7, 7), (11, 3, 3)),
            ((11, 7, 7), (11, 2, 2)),
            ((11, 7, 7), (11, 1, 1)),
            ((11, 7, 7), (11, 0, 0)),

            ((5, 0, 7), (5, 1, 7)),
            ((5, 0, 7), (5, 2, 7)),
            ((5, 0, 7), (5, 3, 7)),
            ((5, 0, 7), (5, 4, 7)),
            ((5, 0, 7), (5, 5, 7)),
            ((5, 0, 7), (5, 6, 7)),
            ((5, 0, 7), (5, 7, 7)),
            ((5, 0, 7), (5, 0, 6)),
            ((5, 0, 7), (5, 0, 5)),
            ((5, 0, 7), (5, 0, 4)),
            ((5, 0, 7), (5, 0, 3)),
            ((5, 0, 7), (5, 0, 2)),
            ((5, 0, 7), (5, 0, 1)),

            ((11, 7, 0), (11, 7, 1)),
            ((11, 7, 0), (11, 7, 2)),
            ((11, 7, 0), (11, 7, 3)),
            ((11, 7, 0), (11, 7, 4)),
            ((11, 7, 0), (11, 7, 5)),
            ((11, 7, 0), (11, 7, 6)),
            ((11, 7, 0), (11, 6, 0)),
            ((11, 7, 0), (11, 5, 0)),
            ((11, 7, 0), (11, 4, 0)),
            ((11, 7, 0), (11, 3, 0)),
            ((11, 7, 0), (11, 2, 0)),
            ((11, 7, 0), (11, 1, 0)),
            ((11, 7, 0), (11, 0, 0)),

            ((5, 0, 0), (5, 0, 1)),
            ((5, 0, 0), (5, 0, 2)),
            ((5, 0, 0), (5, 0, 3)),
            ((5, 0, 0), (5, 0, 4)),
            ((5, 0, 0), (5, 0, 5)),
            ((5, 0, 0), (5, 0, 6)),
            ((5, 0, 0), (5, 1, 0)),
            ((5, 0, 0), (5, 2, 0)),
            ((5, 0, 0), (5, 3, 0)),
            ((5, 0, 0), (5, 4, 0)),
            ((5, 0, 0), (5, 5, 0)),
            ((5, 0, 0), (5, 6, 0)),
            ((5, 0, 0), (5, 7, 0)),

            ((11, 7, 7), (11, 7, 6)),
            ((11, 7, 7), (11, 7, 5)),
            ((11, 7, 7), (11, 7, 4)),
            ((11, 7, 7), (11, 7, 3)),
            ((11, 7, 7), (11, 7, 2)),
            ((11, 7, 7), (11, 7, 1)),
            ((11, 7, 7), (11, 6, 7)),
            ((11, 7, 7), (11, 5, 7)),
            ((11, 7, 7), (11, 4, 7)),
            ((11, 7, 7), (11, 3, 7)),
            ((11, 7, 7), (11, 2, 7)),
            ((11, 7, 7), (11, 1, 7)),
            ((11, 7, 7), (11, 0, 7)),
        ]
        tiedetyt_blokit = [
            ((11, 7, 7), (7, 0)),
            ((11, 7, 0), (7, 7)),
            ((5, 0, 7), (0, 0)),
            ((5, 0, 0), (0, 7))
        ]

        mahdolliset_liikkeet = []
        mahdolliset_blokit = []

        uudet_liikkeet, uudet_edessa, valkoinen_shakissa, musta_shakissa, valkoisen_shakkaajat, mustan_shakkaajat = pelilauta.alusta()
        mahdolliset_liikkeet = mahdolliset_liikkeet + uudet_liikkeet
        mahdolliset_blokit = mahdolliset_blokit + uudet_edessa
        
        self.assertCountEqual(mahdolliset_liikkeet, tiedetyt_liikkeet)
        self.assertCountEqual(mahdolliset_blokit, tiedetyt_blokit)

    
    def test_kuningatar_liikkeet_oikein_4(self):
        lauta = [[11,0,0,0,0,0,0,5],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [5,0,0,0,0,0,0,11]]
        pelilauta = Pelilauta(lauta, self.ruudun_koko)

        tiedetyt_liikkeet = [
            ((5, 0, 7), (5, 1, 6)),
            ((5, 0, 7), (5, 2, 5)),
            ((5, 0, 7), (5, 3, 4)),
            ((5, 0, 7), (5, 4, 3)),
            ((5, 0, 7), (5, 5, 2)),
            ((5, 0, 7), (5, 6, 1)),
            ((5, 0, 7), (5, 0, 0)),

            ((5, 7, 0), (5, 6, 1)),
            ((5, 7, 0), (5, 5, 2)),
            ((5, 7, 0), (5, 4, 3)),
            ((5, 7, 0), (5, 3, 4)),
            ((5, 7, 0), (5, 2, 5)),
            ((5, 7, 0), (5, 1, 6)),
            ((5, 7, 0), (5, 7, 7)),

            ((11, 0, 0), (11, 1, 1)),
            ((11, 0, 0), (11, 2, 2)),
            ((11, 0, 0), (11, 3, 3)),
            ((11, 0, 0), (11, 4, 4)),
            ((11, 0, 0), (11, 5, 5)),
            ((11, 0, 0), (11, 6, 6)),
            ((11, 0, 0), (11, 7, 0)),

            ((11, 7, 7), (11, 6, 6)),
            ((11, 7, 7), (11, 5, 5)),
            ((11, 7, 7), (11, 4, 4)),
            ((11, 7, 7), (11, 3, 3)),
            ((11, 7, 7), (11, 2, 2)),
            ((11, 7, 7), (11, 1, 1)),
            ((11, 7, 7), (11, 7, 0)),

            ((5, 0, 7), (5, 1, 7)),
            ((5, 0, 7), (5, 2, 7)),
            ((5, 0, 7), (5, 3, 7)),
            ((5, 0, 7), (5, 4, 7)),
            ((5, 0, 7), (5, 5, 7)),
            ((5, 0, 7), (5, 6, 7)),
            ((5, 0, 7), (5, 7, 7)),
            ((5, 0, 7), (5, 0, 6)),
            ((5, 0, 7), (5, 0, 5)),
            ((5, 0, 7), (5, 0, 4)),
            ((5, 0, 7), (5, 0, 3)),
            ((5, 0, 7), (5, 0, 2)),
            ((5, 0, 7), (5, 0, 1)),

            ((5, 7, 0), (5, 7, 1)),
            ((5, 7, 0), (5, 7, 2)),
            ((5, 7, 0), (5, 7, 3)),
            ((5, 7, 0), (5, 7, 4)),
            ((5, 7, 0), (5, 7, 5)),
            ((5, 7, 0), (5, 7, 6)),
            ((5, 7, 0), (5, 6, 0)),
            ((5, 7, 0), (5, 5, 0)),
            ((5, 7, 0), (5, 4, 0)),
            ((5, 7, 0), (5, 3, 0)),
            ((5, 7, 0), (5, 2, 0)),
            ((5, 7, 0), (5, 1, 0)),
            ((5, 7, 0), (5, 0, 0)),

            ((11, 0, 0), (11, 0, 1)),
            ((11, 0, 0), (11, 0, 2)),
            ((11, 0, 0), (11, 0, 3)),
            ((11, 0, 0), (11, 0, 4)),
            ((11, 0, 0), (11, 0, 5)),
            ((11, 0, 0), (11, 0, 6)),
            ((11, 0, 0), (11, 1, 0)),
            ((11, 0, 0), (11, 2, 0)),
            ((11, 0, 0), (11, 3, 0)),
            ((11, 0, 0), (11, 4, 0)),
            ((11, 0, 0), (11, 5, 0)),
            ((11, 0, 0), (11, 6, 0)),
            ((11, 0, 0), (11, 0, 7)),

            ((11, 7, 7), (11, 7, 6)),
            ((11, 7, 7), (11, 7, 5)),
            ((11, 7, 7), (11, 7, 4)),
            ((11, 7, 7), (11, 7, 3)),
            ((11, 7, 7), (11, 7, 2)),
            ((11, 7, 7), (11, 7, 1)),
            ((11, 7, 7), (11, 6, 7)),
            ((11, 7, 7), (11, 5, 7)),
            ((11, 7, 7), (11, 4, 7)),
            ((11, 7, 7), (11, 3, 7)),
            ((11, 7, 7), (11, 2, 7)),
            ((11, 7, 7), (11, 1, 7)),
            ((11, 7, 7), (11, 0, 7)),
        ]
        tiedetyt_blokit = [
            ((11, 7, 7), (0, 0)),
            ((5, 7, 0), (0, 7)),
            ((5, 0, 7), (7, 0)),
            ((11, 0, 0), (7, 7))
        ]

        mahdolliset_liikkeet = []
        mahdolliset_blokit = []

        uudet_liikkeet, uudet_edessa, valkoinen_shakissa, musta_shakissa, valkoisen_shakkaajat, mustan_shakkaajat = pelilauta.alusta()
        mahdolliset_liikkeet = mahdolliset_liikkeet + uudet_liikkeet
        mahdolliset_blokit = mahdolliset_blokit + uudet_edessa
        
        self.assertCountEqual(mahdolliset_liikkeet, tiedetyt_liikkeet)
        self.assertCountEqual(mahdolliset_blokit, tiedetyt_blokit)
